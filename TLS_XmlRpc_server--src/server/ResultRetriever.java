package server;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

import exceptions.TestExecutorException;



/**
 * This class is designed to retrieve the results of a test run from the .xml
 * file generated by Ant.
 * @author Adrien Droguet
 * @version 1.0	15/03/2012 <br>
 * 				Retrieves the result, notes, schedule and timestamp information.<br>
 * @version 1.1	16/063/2012 <br>
 * 				Various adjustments to the test notes' layout.<br>
 * @version 1.2	20/03/2012 <br>
 * 				Added support for packaged tests.<br>
 * 				Changed fetch methods' visibility to public.<br>
 * @version 2.0	5/04/2012<br>
 * 				Added support for test suite runs.<br>
 * @see TestExecutor
 */
public class ResultRetriever {

	/**
	 * Retrieves the test results out of the generated XML file
	 * @return A HashMap containing  the results.
	 * @throws TestExecutorException 
	 */
	public static HashMap<Object, Object> retrieveResults()
			throws TestExecutorException {
		HashMap<Object, Object> res = new HashMap<Object, Object>();
		SAXBuilder builder = new SAXBuilder();
		try {
			String url = "";
			if (ExecutorSetup.getReportURL() == null
					|| ExecutorSetup.getReportURL().equals(""))
				throw new TestExecutorException("Report URL is not set.");
			else
				url += ExecutorSetup.getReportURL() + "TEST-";
			
			if (ExecutorSetup.getTestPackage() != null
					&& ExecutorSetup.getTestPackage().length() > 0)
				url += ExecutorSetup.getTestPackage() + ".";
			
			if (ExecutorSetup.getTestName() == null ||
					ExecutorSetup.getTestName().equals(""))
				throw new TestExecutorException("No test name was given.");
			else
				url += ExecutorSetup.getTestName() + ".xml";
			
			Document doc = builder.build(url);
			Element testSuite = doc.getRootElement();// <testsuite>
			
			fetchResult(testSuite, res);
			fetchNotes(testSuite, res);
			fetchScheduled(testSuite, res);
			fetchTimestampISO(testSuite, res);
			
		} catch (JDOMException | IOException e) {
			e.printStackTrace();
		}
		return res;
	}

	/**
	 * 'timestampISO'
	 * @param testSuite
	 * @param res
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static void fetchTimestampISO(Element testSuite, HashMap res) {
		res.put("timestampISO", testSuite.getAttributeValue("timestamp"));
	}


	/**
	 * Fetches the result in order to determine whether the test already ran.
	 * @param testSuite
	 * @param res
	 */
	public static void fetchScheduled(Element testSuite,
			HashMap<Object, Object> res) {
		char zwitch;
		try {
			zwitch = ((String) res.get("result")).charAt(0);
		} catch (NullPointerException e) {
			fetchResult(testSuite, res);
			zwitch = ((String) res.get("result")).charAt(0);
		}
		if (zwitch == 'p'
				|| zwitch == 'f'
				|| zwitch == 'b'
				) {
			res.put("scheduled", "now");
		} else {
			res.put("scheduled", "scheduled");
		}
	}

	/**
	 * 'notes' regarding the test.
	 * Must be used after fetchResult, as it uses the result stored into the
	 * HashMap.
	 * @param testSuite
	 * @param res
	 */
	public static void fetchNotes(Element testSuite,
			HashMap<Object, Object> res) {
		String notes = "";
		@SuppressWarnings("unchecked")
		List<Element> testCases = testSuite.getChildren("testcase");
		for (Element testCase : testCases) {
			notes += "\n\nTestCase: " + testCase.getAttributeValue("classname");
			char resChar;
			try {
				//resChar = ((String) res.get("result")).charAt(0);
				resChar = fetchResult(testCase);
			} catch (NullPointerException e) {
				fetchResult(testSuite, res);
				resChar = ((String) res.get("result")).charAt(0);
			}
			switch (resChar) {
			case 'b': {
				notes += "\nThe test didn't run due to an error.\nError" +
						" report:\n\n"
						+ testCase.getChild("error").getValue();
				break;
			}
			case 'f': {
				notes += "\nThe test has failed.\nFailure report:\n\n"
						+ testCase.getChild("failure").getValue();
				break;
			}
			case 'p': {
				notes += "\nThe test passed successfully.";
				break;
			}
			default: { // this time we deal with the unrunned test
				notes += "\nThe test wasn't executed.";
				break;
			}
			}
		}
		notes += "\n\nTest time: " + testSuite.getAttributeValue("time");
		
		res.put("notes", notes);
	}


	/**
	 * Gets the result for the entire testSuite.<br>
	 * 'result' is either:<br>
	 * 		--> 'p' for "passed"<br>
	 * 		--> 'f' for "failed"<br>
	 * 		--> 'b' for "blocked"<br>
	 * 		--> '' if the test did not run or if there has been some other
	 * error.<br>
	 * @param testSuite
	 * @param res
	 */
	public static void fetchResult(Element testSuite,
			HashMap<Object, Object> res) {
		String status = "";
		
		if (testSuite.getAttributeValue("errors").charAt(0) > '0') {
			status = "b";
		} else if (testSuite.getAttributeValue("failures").charAt(0) > '0') {
			status = "f";
		} else { //no error & no failure = success
			status = "p";
		}
		// not handled: the test didn't run
		
		res.put("result", status);
	}
	
	/**
	 * Gets the result for the a single testCase.<br>
	 * 'result' is either:<br>
	 * 		--> 'p' for "passed"<br>
	 * 		--> 'f' for "failed"<br>
	 * 		--> 'b' for "blocked"<br>
	 * 		--> '' if the test did not run or if there has been some other
	 * error.<br>
	 * @param testCase
	 * @return Result
	 */
	public static char fetchResult(Element testCase) {
		char status;
		
		if (testCase.getChild("error") != null) {
			status = 'b';
		} else if (testCase.getChild("failure") != null) {
			status = 'f';
		} else { //no error & no failure = success
			status = 'p';
		}
		// not handled: the test didn't run
		
		return status;
	}
}
